#!/usr/bin/python3 -u

import argparse
import datetime
import os.path
import re
import subprocess
import sys

__license__ = 'GNU General Public License v3.0 or later'
__contact__ = 'https://github.com/makhomed/autosnap'
__version__ = '2.4.0'


ZFS_BINARY_FILENAME = '/usr/sbin/zfs'
AUTOSNAP_CONFIG_FILENAME = '/opt/autosnap/autosnap.conf'


class Process:
    def __init__(self, *args):
        self.args = args
        process = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True, cwd='/')
        self.stdout_bytes, self.stderr_bytes = process.communicate()
        self.stdout = self.stdout_bytes.decode(encoding="utf-8", errors="replace").strip()
        self.stderr = self.stderr_bytes.decode(encoding="utf-8", errors="replace").strip()
        self.returncode = process.returncode

    def failed(self):
        return self.returncode != 0

    def print_info(self, message):
        print(message + ": Process(", self.args, ") failed")
        print("returncode:", self.returncode)
        print("stdout:", self.stdout)
        print("stderr:", self.stderr)


class Config:
    def __init__(self, args):
        self.intervals = dict()
        self.intervals['**'] = dict()
        self.filters = list()
        self._ignore = list()
        self.args = args
        self.command = args.command
        self.datasets = SnapMan.get_datasets()
        if not os.path.isfile(ZFS_BINARY_FILENAME):
            sys.exit(f"zfs binary file {ZFS_BINARY_FILENAME} not found")
        if not os.path.isfile(AUTOSNAP_CONFIG_FILENAME):
            sys.exit(f"configuration file '{AUTOSNAP_CONFIG_FILENAME}' not found")
        with open(AUTOSNAP_CONFIG_FILENAME) as configuration_file:
            lines = configuration_file.read().strip().split('\n')
        inside_dataset = False
        dataset = None
        for line in lines:
            comment_start = line.find('#')
            if comment_start > -1:
                line = line[:comment_start]
            line = line.strip()
            if not line:
                continue
            line = line.replace("\t", "\x20")
            if line[0] == '[' and line[-1] == ']':
                inside_dataset = True
                dataset = line[1:-1].strip()
                self.intervals[dataset] = dict()
                if dataset not in self.datasets:
                    print(f"WARNING!!! dataset '{dataset}' not exists")
                if '*' in dataset or '?' in dataset or '\t' in dataset or '\x20' in dataset:
                    sys.exit(f"bad config: bad dataset name '{dataset}'")
                continue
            try:
                name, value = line.split(None, 1)
            except ValueError:
                sys.exit(f"bad config: bad line: {line}")
            if name == "interval":
                interval_name, count_string = value.split(None, 1)
                if interval_name.find(".") > -1:
                    sys.exit("bad config: interval '%s', symbol '.' not allowed" % interval_name)
                if not inside_dataset:
                    if interval_name in self.intervals['**']:
                        sys.exit("bad config: interval '%s' already defined" % interval_name)
                else:
                    if interval_name not in self.intervals['**']:
                        sys.exit("bad config: interval '%s' not defined at global level" % interval_name)
                    if interval_name in self.intervals[dataset]:
                        sys.exit("bad config: interval '%s' already defined at dataset level" % interval_name)
                count = int(count_string)
                if count <= 0:
                    sys.exit("bad config: interval '%s' count must be positive integer, '%d' given" % (interval_name, count))
                if not inside_dataset:
                    self.intervals['**'][interval_name] = count
                else:
                    self.intervals[dataset][interval_name] = count

            elif name == "include" or name == "exclude" or name == "ignore":
                if not inside_dataset:
                    self.filters.append((name == "include", self.transform_filter_line(value)))
                    if name == "ignore":
                        self._ignore.append(self.transform_filter_line(value))
                else:
                    sys.exit(f"bad config: directive '{name}' allowed only on global level")
            else:
                sys.exit("bad config: invalid directive '%s'" % name)
        self.filters.append((True, self.transform_filter_line("**")))
        if self.command is not None and self.command not in self.intervals['**']:
            sys.exit("bad command '%s', interval '%s' not defined in config" % (self.command, self.command))

    def transform_filter_line(self, filter_line):  # pylint: disable=no-self-use
        if filter_line.find(" ") > -1:
            sys.exit("config: invalid filter line '%s', spaces not allowed" % filter_line)
        filter_line = filter_line.replace(r".", r"\.")
        filter_line = filter_line.replace(r"?", r".")
        filter_line = filter_line.replace(r"*", r"[^/]*")
        filter_line = filter_line.replace(r"[^/]*[^/]*", r".*")
        if filter_line[0] != '^':
            filter_line = '^' + filter_line
        if filter_line[-1] != '$':
            filter_line = filter_line + '$'
        return filter_line

    def included(self, dataset):
        for dataset_included, filter_line in self.filters:
            if re.match(filter_line, dataset):
                return dataset_included
        sys.exit(f"internal error: dataset '{dataset}' don't match any filter line")

    def ignored(self, dataset):
        for filter_line in self._ignore:
            if re.match(filter_line, dataset):
                return True
        return False


class SnapMan:
    def __init__(self, config):
        self.config = config

    @staticmethod
    def get_datasets():
        process = Process(ZFS_BINARY_FILENAME, "list", "-H", "-o", "name")
        if process.failed():
            print("can't read ZFS datasets")
            process.print_info("fatal error")
            sys.exit(1)
        datasets = process.stdout.strip().split('\n')
        return datasets

    def create_snapshot(self, dataset):
        assert self.config.command is not None
        now = datetime.datetime.now().strftime("%Y-%m-%d.%H:%M:%S")
        snapshot_name = dataset + "@autosnap." + now + "." + self.config.command
        process = Process(ZFS_BINARY_FILENAME, "snapshot", snapshot_name)
        if process.failed():
            print("can't create ZFS snapshot '%s'" % snapshot_name)
            process.print_info("error")

    @staticmethod
    def delete_snapshot(snapshot_name):
        assert '@' in snapshot_name
        process = Process(ZFS_BINARY_FILENAME, "destroy", "-d", snapshot_name)
        if process.failed():
            snapshot_busy_message = f'cannot destroy snapshot {snapshot_name}: dataset is busy'
            if process.returncode == 1 and process.stderr.strip() == snapshot_busy_message:
                pass
            else:
                print("can't delete ZFS snapshot '%s'" % snapshot_name)
                process.print_info("error")

    def get_command_snapshots(self):
        process = Process(ZFS_BINARY_FILENAME, "list", "-H", "-p", "-o", "name,creation", "-t", "snap")
        if process.failed():
            print("can't read ZFS snapshots")
            process.print_info("fatal error")
            sys.exit(1)
        lines = process.stdout.strip().split('\n')
        snapshots = dict()
        for line in lines:
            line = line.strip()
            if not line:
                continue
            snapshot_name, creation_date_as_string = line.split()
            dataset_name, snapshot_info = snapshot_name.split('@')
            if not snapshot_info.startswith("autosnap."):
                continue
            creation_date = int(creation_date_as_string)
            last_point_position = snapshot_info.rfind('.')
            snapshot_command = snapshot_info[last_point_position + 1:]
            snapshot = dict(snapshot_name=snapshot_name, dataset_name=dataset_name,
                            snapshot_command=snapshot_command, creation_date=creation_date)
            if snapshot_command == self.config.command:
                if dataset_name not in snapshots:
                    snapshots[dataset_name] = list()
                snapshots[dataset_name].append(snapshot)
        return snapshots

    def get_all_snapshots(self):
        process = Process(ZFS_BINARY_FILENAME, "list", "-H", "-p", "-o", "name,creation", "-t", "snap")
        if process.failed():
            print("can't read ZFS snapshots")
            process.print_info("fatal error")
            sys.exit(1)
        lines = process.stdout.strip().split('\n')
        all_snapshots = dict()
        for line in lines:
            line = line.strip()
            if not line:
                continue
            snapshot_name, creation_date_as_string = line.split()
            dataset_name, snapshot_info = snapshot_name.split('@')
            creation_date = int(creation_date_as_string)
            last_point_position = snapshot_info.rfind('.')
            snapshot_command = snapshot_info[last_point_position + 1:]
            snapshot = dict(snapshot_name=snapshot_name, dataset_name=dataset_name,
                            snapshot_command=snapshot_command, creation_date=creation_date)
            if dataset_name not in all_snapshots:
                all_snapshots[dataset_name] = list()
            all_snapshots[dataset_name].append(snapshot)
        return all_snapshots

    def get_keep_count(self, dataset_name):
        if dataset_name in self.config.intervals and self.config.command in self.config.intervals[dataset_name]:
            return self.config.intervals[dataset_name][self.config.command]
        else:
            return self.config.intervals['**'][self.config.command]

    def delete_expired_snapshots(self, snapshots, verbose=False):
        for dataset_name in snapshots.keys():
            if self.config.included(dataset_name):
                dataset_snapshots = snapshots[dataset_name]
                dataset_snapshots.sort(key=lambda x: x['creation_date'], reverse=True)
                keep_count = self.get_keep_count(dataset_name)
                if len(dataset_snapshots) > keep_count:
                    delete_queue = dataset_snapshots[keep_count:]
                    for snapshot in delete_queue:
                        if verbose:
                            print("delete expired snapshot %s" % snapshot["snapshot_name"])
                        self.delete_snapshot(snapshot["snapshot_name"])

    def delete_all_expired_snapshots(self):
        all_intervals = list(self.config.intervals['**'].keys())
        save_command = self.config.command
        for interval in all_intervals:
            self.config.command = interval
            snapshots = self.get_command_snapshots()
            self.delete_expired_snapshots(snapshots, verbose=True)
        self.config.command = save_command

    def print_extra_snapshots(self):
        extra_snapshots = list()
        all_intervals = list(self.config.intervals['**'].keys())
        all_snapshots = self.get_all_snapshots()
        all_datasets = all_snapshots.keys()
        for dataset in all_datasets:
            for snapshot in all_snapshots[dataset]:
                snapshot_name = snapshot["snapshot_name"]
                snapshot_info = snapshot_name.split('@')[1]
                snapshot_command = snapshot["snapshot_command"]
                if not snapshot_info.startswith("autosnap.") or snapshot_command not in all_intervals or not self.config.included(dataset):
                    if not self.config.ignored(dataset):
                        extra_snapshots.append(snapshot_name)
        if len(extra_snapshots) > 0:
            print('\n'.join(extra_snapshots))

    def run(self):
        if self.config.args.delete:
            self.delete_all_expired_snapshots()
        if self.config.args.extra:
            self.print_extra_snapshots()
        if self.config.args.command is not None:
            datasets = self.get_datasets()
            for dataset in datasets:
                if self.config.included(dataset):
                    self.create_snapshot(dataset)
            snapshots = self.get_command_snapshots()
            self.delete_expired_snapshots(snapshots)


def main():
    parser = argparse.ArgumentParser(prog="autosnap")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument("-v", "--version", action='version', version=f"%(prog)s {__version__}", help="show program's version and exit")
    group.add_argument("-d", "--delete", action='store_true', help="delete all expired snapshots, managed by autosnap")
    parser.add_argument("-x", "--extra", action='store_true', help="list all snapshots, not managed by autosnap")
    group.add_argument("command", action='store', nargs='?', default=None, help="it must be one of config interval names")

    args = parser.parse_args()
    if not args.delete and not args.extra and args.command is None:
        parser.print_help()
        sys.exit(2)

    config = Config(args)
    SnapMan(config).run()


if __name__ == "__main__":
    main()
